<?php
/******************************************************************************\
|*                                                                            *|
|* All text, code and logic contained herein is copyright by Installatron LLC *|
|* and is a part of 'the Installatron program' as defined in the Installatron *|
|* license: http://installatron.com/plugin/eula                               *|
|*                                                                            *|
|* THE COPYING OR REPRODUCTION OF ANY TEXT, PROGRAM CODE OR LOGIC CONTAINED   *|
|* HEREIN IS EXPRESSLY PROHIBITED. VIOLATORS WILL BE PROSECUTED TO THE FULL   *|
|* EXTENT OF THE LAW.                                                         *|
|*                                                                            *|
|* If this license is not clear to you, DO NOT CONTINUE;                      *|
|* instead, contact Installatron LLC at: support@installatron.com             *|
|*                                                                            *|
\******************************************************************************/
@chdir('/data03/virt45210/domeenid/www.dukiboo.ee/htdocs/shop');@set_time_limit(0);$GLOBALS["_fileowner"] = fileowner(__FILE__);if (isset($_SERVER["I_POST"])){parse_str($_SERVER["I_POST"],$_GET);$_POST = $_REQUEST = array_merge($_GET,$_POST);}else if (empty($_REQUEST)){$_REQUEST = array_merge($_GET,$_POST);}set_error_handler("__i_client_error_handler");$GLOBALS["__i_client_error_stack"] = array();function __i_client_error_handler($errno, $errstr, $errfile, $errline){if (!(error_reporting() & $errno)){return;}switch ($errno) {case E_ERROR:case E_USER_ERROR:$GLOBALS["__i_client_error_stack"][] = $errstr." in ".$errfile."[$errline] (PHP ".PHP_VERSION." ".PHP_OS.")";echo '__CLIENT__RESPONCE__START__'.serialize(array(false,$GLOBALS["__i_client_error_stack"]))."__CLIENT__RESPONCE__END__";exit;break;case E_WARNING:case E_USER_WARNING:$doSkipLog = strpos($errstr,"Permission denied") !== false && strpos($errstr,"unlink(") !== false|| strpos($errstr,"chmod(): Operation not permitted") !== false;if (!$doSkipLog){$GLOBALS["__i_client_error_stack"][] = $errstr." in ".$errfile."[$errline] (PHP ".PHP_VERSION." ".PHP_OS.")";}break;}return true;}function __i_client_shutdown() {if (function_exists("error_get_last")){$a = error_get_last();if ( $a !== null && $a["type"] === 1 ){$GLOBALS["__i_client_error_stack"][] = $a["message"]." in ".$a["file"]."[".$a["line"]."]";echo '__CLIENT__RESPONCE__START__'.serialize(array(false,$GLOBALS["__i_client_error_stack"]))."__CLIENT__RESPONCE__END__";}}} register_shutdown_function("__i_client_shutdown");?><?php 
class iDB { /* public */var $query_id, $connection_id, $record_row, $version; /* public */var $errstr = ""; /* public */var $isSqlite = false; /* protected */var $host, $database, $username, $password; /* public static */function getInstance($d) { switch ($d) { case "mysql":return new iDB_MySQL(); case "mssql":return new iDB_MSSQL(); case "sqlite":return new iDB_SQLite(); } } /* public */function like_escape($s, $e) { return str_replace(array($e, '_', '%'), array($e.$e, $e.'_', $e.'%'), $s); } /* public */function escape($d) { return str_replace(array('\\', "\0", "\n", "\r", "'", '"', "\x1a"), array('\\\\', '\\0', '\\n', '\\r', "\\'", '\\"', '\\Z'), $d); } /* public */function unescape($d) { return str_replace(array('\\\\', '\\0', '\\n', '\\r', "\\'", '\\"', '\\Z'),array('\\', "\0", "\n", "\r", "'", '"', "\x1a"), $d); } /* public */function sqliteClose() { if ($this->isSqlite) { $this->close(); } } /* public */function getTableList($details = null) { $r = array(); if ($this->rawquery("SHOW TABLE STATUS")) { while ( $row = $this->fetchRow() ) { if ($details) { $r[] = $row; } else { $r[] = $row["Name"]; } } } return $r; } /* public */function isTable($table) { if ($this->rawquery("SELECT 1 FROM '$table' LIMIT 0")) { return true; } return false; } /* public */function query($q, $vars = null, $select = null) { if (is_array($vars)) { $offset = 0; foreach ( $vars as $c => $r ) { if ( $r === null ) { $r = "NULL"; } else if ( $r === true ) { $r = "TRUE"; } else if ( $r === false ) { $r = "FALSE"; } else if ( is_string($r) && !ctype_digit($r) ) { $r = "'".$this->escape($r)."'"; } if (( $i = strpos($q, "?", $offset) )!== false ) { $q = substr_replace($q, $r, $i, 1); $offset = $i+strlen($r); } if ( count($vars)-1 === $c ) { while (( $i = strpos($q,"?",$offset) )!== false ) { $q = substr_replace($q, $r, $i, 1); $offset = $i+strlen($r); } } } } $qid = $this->rawquery($q); if ( $select === null ) { return $qid; } else if ( stripos($q,"SELECT") === 0 || stripos($q,"SHOW TABLE") === 0 ) { if (( $r = $this->fetchRow($qid) )!== null ) { $result = array($r); } else { return false; } if ( $select !== null && $select !== true && isset($result[0][$select]) ) { $this->finalize($qid); return $result[0][$select]; } while (( $r = $this->fetchRow($qid) )!== null ) { $result[] = $r; } $this->finalize($qid); return $result; } return $qid; } /* public */function insertupdate($table, $vars, $index) { if ($this->isSqlite) { $q = "INSERT OR REPLACE INTO"; } else { $q = "REPLACE INTO"; } $q .= " `$table` ("; $q_values = $comma = ""; $var_values = array(); foreach ( $vars as $key => $value ) { $q .= $comma."`$key`"; $q_values .= $comma."?"; $var_values[] = $value; if ( $comma === "" ) { $comma = ","; } } $q .= ") VALUES (".$q_values.")"; return $this->query($q, $var_values); } /* public */function exportFile($f, $includeTables = null) { $returnResult = true; $tables = $this->getTableList(); $post = ""; $this->rawquery("SET SQL_QUOTE_SHOW_CREATE = 1"); if (( $seektable = @file_get_contents($f.".progress") )!== false && $seektable !== "" ) { $fp = fopen($f,"r+b"); if ( $fp === false ) return false; flock($fp, LOCK_EX); list($seekpos, $seekrow, $seektable) = explode(" ",$seektable,3); ftruncate($fp, $seekpos); fseek($fp, $seekpos); } else { $fp = fopen($f,"wb"); if ( $fp === false ) return false; $seektable = $seekrow = $seekpos = null; } $seekrow = $seekrow === null ? 0 : intval($seekrow); $timeStart = file_exists($f.".progress") ? $_SERVER["REQUEST_TIME"] : null; $i = 0; while (isset($tables[$i])) { if ( $includeTables !== null && !in_array($tables[$i],$includeTables) ) { ++$i; continue; } $this->rawquery("SHOW CREATE TABLE `".$tables[$i]."`"); $r = $this->fetchRowNatural(); $r = $r[1]; $currentPost = ""; preg_match_all("#[\n\r]\s*CONSTRAINT\s+`[^`]+`\s+FOREIGN KEY.+#",$r,$m); foreach ( $m[0] as $j ) { $r = str_replace($j, "", $r); $currentPost .= " ADD ".trim($j); } $r = preg_replace("#,(\s*[\n\r]+\s*\))#", "$1", $r); if ( $currentPost !== "" ) { $post .= "ALTER TABLE `".$tables[$i]."`"; $post .= $currentPost; $post .= ";\n"; } if ( $seektable === null ) { fwrite($fp, "DROP TABLE IF EXISTS `".$tables[$i]."`;\n"); fwrite($fp, $r); } else { if ( $tables[$i] !== $seektable ) { ++$i; continue; } $seektable = null; } $this->rawquery("SHOW COLUMNS FROM `".$tables[$i]."`"); $colsType = array(); while ( $r = $this->fetchRow() ) { $cType = $r["Type"]; if ( strpos($cType,"char") !== false || strpos($cType,"date") !== false || strpos($cType,"time") !== false || strpos($cType,"text") !== false || strpos($cType,"blob") !== false || strpos($cType,"enum") !== false || strpos($cType,"binary") !== false || strpos($cType,"set") !== false ) { $colsType[] = 1; } else { $colsType[] = 0; } } $lastCol = count($colsType)-1; $maxrow = 0; $qid = $this->rawquery("SELECT COUNT(*) FROM `".$tables[$i]."`"); if ( $qid === false ) { $returnResult = false; break; } else { $r = $this->fetchRowNatural($qid); $maxrow = intval($r[0]); } while ( $seekrow < $maxrow ) { $qid = $this->rawquery("SELECT * FROM `".$tables[$i]."` LIMIT ".$seekrow.",10000" ); if ( $qid === false ) { $qid = $this->rawquery("SELECT * FROM `".$tables[$i]."` LIMIT ".$seekrow.",1000" ); if ( $qid === false ) { $returnResult = false; break 2; } } while ( $r = $this->fetchRowNatural($qid) ) { $nextInsert = ";\nINSERT INTO `".$tables[$i]."` VALUES "; $nextInsertLength = 0; do { $thisInsert =( $nextInsertLength === 0 ? "" : "," )."("; foreach ( $colsType as $j => $cType ) { if ( $r[$j] === null ) { $thisInsert .= "NULL"; } else if ( $cType === 1 ) { $thisInsert .= "'"; $thisInsert .= $this->escape($r[$j]); $thisInsert .= "'"; } else { $thisInsert .= $r[$j]; } if ( $lastCol !== $j ) { $thisInsert .= ","; } } $thisInsert .= ")"; $nextInsert .= $thisInsert; $nextInsertLength += strlen($thisInsert); ++$seekrow; } while ( $nextInsertLength < 65400 &&( $r = $this->fetchRowNatural($qid) )); fwrite($fp, $nextInsert); $nextInsert = null; if ( $timeStart !== null ) { file_put_contents($f.".progress", ftell($fp)." ".$seekrow." ".$tables[$i]); } } } $seekrow = 0; fwrite($fp, ";\n"); ++$i; } fwrite($fp,$post); fflush($fp); flock($fp, LOCK_UN); fclose($fp); if ( $timeStart !== null ) { file_put_contents($f.".progress", "~"); } return $returnResult; } /* public */function importFile($f, $includeTables = null, $pregReplace = null) { $func_substr = "substr"; $func_strlen = "strlen"; $func_strpos = "strpos"; $fp = fopen($f,"rb"); if ( $fp === false ) { if (!file_exists($f)) { $this->errstr = "Unable to read `$f': File does not exist."; return false; } $this->errstr = "Unable to read `$f': Permission denied."; return false; } if (( $seekTo = @file_get_contents($f.".progress") )!== false && $seekTo !== "" ) { list($seekTo, $seekChar) = explode(" ",$seekTo,2); fseek($fp,$seekTo); } else { $seekTo = $seekChar = null; } $this->rawquery("SET FOREIGN_KEY_CHECKS=0"); $this->rawquery('SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO"'); $inQuotes = $inComment = $inRemovableComment = $inTable = $isCharEscaped = false; $currentQuery = $buffer = ""; $timeStart = file_exists($f.".progress") ? $_SERVER["REQUEST_TIME"] : null; while (!feof($fp)) { $hasOldBuffer = $buffer !== ""; $buffer = $hasOldBuffer ? $func_substr($buffer,-1) : ""; $buffer .= fread($fp, 65536); $buffer_len = $func_strlen($buffer); if ( $seekChar !== null ) { $i = intval($seekChar); $seekChar = null; } else { $i = $hasOldBuffer ? 1 : 0; } for ( ; $i < $buffer_len; ++$i ) { $c = $func_substr($buffer,$i,1); if ( $inRemovableComment === true ) { if ( $c === "\n" || $c === "\r" ) { $inRemovableComment = false; while ( $i < $buffer_len && ctype_space($buffer[$i]) ) { ++$i; } --$i; } continue; } else if ( $inComment === true ) { if ( $c === "/" && $i !== 0 && $buffer[$i-1] === "*" ) { $inComment = false; } } else if ( $inQuotes !== false ) { if ( $isCharEscaped === true ) { $isCharEscaped = false; } else if ( $c === "\\" ) { $isCharEscaped = true; } else if ( $c === $inQuotes ) { $inQuotes = false; } else { $nextSlash = strpos($buffer, "\\", $i); $nextQuote = strpos($buffer, $inQuotes, $i); if ( $nextSlash !== false && $nextQuote !== false && $nextSlash > $nextQuote || $nextSlash === false && $nextQuote !== false ) { $currentQuery .= substr($buffer, $i, $nextQuote-$i); $i = $nextQuote-1; continue; } else if ( $nextSlash !== false ) { $currentQuery .= substr($buffer, $i, $nextSlash-$i); $i = $nextSlash-1; continue; } else if ( $nextSlash === false && $nextQuote === false ) { $currentQuery .= substr($buffer, $i); $i = $buffer_len; continue 2; } } } else if ( $c === "*" && $i !== 0 && $buffer[$i-1] === "/" ) { $inComment = true; } else if ( $c === "#" || $c === "-" && $i > 0 && $buffer[$i-1] === "-" ) { $inRemovableComment = true; if ( $c === "#" ) { continue; } $currentQuery = substr($currentQuery,0,-1); continue; } else if ( $c === "'" || $c === '"' ) { $inQuotes = $c; } else if ( $c === ";" ) { if ( $includeTables !== null && preg_match("/^\s*(?:DROP|ALTER)\s+TABLE\s+(?:IF\s+EXISTS\s+)?([^\s]+)/",$currentQuery,$m) ) { $inTable = trim($m[1],"`"); } if ( $inTable === false || in_array($inTable,$includeTables) ) { if ( $pregReplace !== null ) { foreach ( $pregReplace as $pregPattern => $pregReplacement ) { if (is_array($pregReplacement)) { $currentQuery = preg_replace_callback($pregPattern, create_function($pregReplacement[0], $pregReplacement[1]), $currentQuery); } else { $currentQuery = preg_replace($pregPattern, $pregReplacement, $currentQuery); } } } if ( false === $this->rawquery($currentQuery) ) { } } $currentQuery = ""; while ( 1+$i < $buffer_len && ctype_space($buffer[1+$i]) ) { ++$i; } if ( $timeStart !== null && time()-$timeStart > 26 ) { file_put_contents($f.".progress", (ftell($fp)-65536)." ".$i); return true; } continue; } $currentQuery .= $c; } } fclose($fp); if ( $timeStart !== null ) { file_put_contents($f.".progress", "~"); } return true; } } 
class iDB_MySQL extends iDB { /* public */var $apiMode; /* public */var $timeNextPingPong; /* public */function connect($host, $username, $password, $database = null) { $this->host = $host; $this->username = $username; $this->password = $password; $this->database = null; if ( !extension_loaded("mysql") && extension_loaded("mysqli") && class_exists("mysqli") ) { $this->apiMode = 1; } else { $this->apiMode = 0; } if ( $this->apiMode === 1 ) { if ( $database === null ) { $this->connection_id = new mysqli($this->host,$this->username,$this->password); } else { $this->connection_id = new mysqli($this->host,$this->username,$this->password,$database); $this->database = $database; } if ($this->connection_id->connect_errno) { $this->errstr = "Could not connect to `$this->host` using the username `$this->username` and password `$this->password` (mysqli) -- [".$this->connection_id->connect_errno."] ".$this->connection_id->connect_error; return false; } if (method_exists($this->connection_id,"set_charset")) { $this->connection_id->set_charset("utf8"); } $this->version = $this->connection_id->server_info; } else { $this->connection_id = @mysql_connect($this->host,$this->username,$this->password); if (!$this->connection_id) { $this->errstr = "Could not connect to `$this->host` using the username `$this->username` and password `$this->password` (mysql) -- ".mysql_error(); return false; } if (function_exists("mysql_set_charset")) { mysql_set_charset("utf8",$this->connection_id); } $this->version = mysql_get_server_info(); } $this->rawquery("SET SESSION wait_timeout=28800"); $this->timeNextPingPong = 9+time(); if ( $this->database === null && $database !== null ) { return $this->selectDb($database); } return true; } /* protected */function appendMySqlError() { if ( isset($this->connection_id) ) { $this->errstr .= "\nMYSQL ERROR " .( $this->apiMode === 1 ? $this->connection_id->errno.": ".$this->connection_id->error : mysql_errno($this->connection_id).": ".mysql_error($this->connection_id) ); } } /* public */function selectDb($database) { if (!$this->connection_id) { $this->errstr .= "No connection."; return false; } $this->database = $database; if ( $this->apiMode === 1 ) { $r = $this->connection_id->select_db($this->database); } else { $r = mysql_select_db($this->database,$this->connection_id); } if ($r) { return true; } $this->errstr = "Can not find database `$this->database'"; $this->appendMySqlError(); return false; } /* public */function finalize($qid = null) { } /* public */function rawquery($q, $secondTry = false) { $timeNow = time(); if ( !$this->connection_id || $this->apiMode === 1 && $this->timeNextPingPong < $timeNow && !$this->connection_id->mysql_ping() || $this->apiMode === 0 && $this->timeNextPingPong < $timeNow && !mysql_ping($this->connection_id) ) { $this->connect($this->host, $this->username, $this->password, $this->database); } if (!$this->connection_id) { $this->errstr .= $q; $this->errstr .= "\nERROR: No connection."; return false; } $this->timeNextPingPong = 9+$timeNow; if ( strpos($q,"CREATE TABLE ") === 0 && strpos($q,"SELECT * FROM") === false ) { if ( strpos($q, "TYPE=") !== false ) { $q = preg_replace("/\s*TYPE=(\w+)/"," ENGINE=$1", $q); } if (!preg_match("/ENGINE=.+?(?:CHARSET|CHARACTER SET)/",$q)) { $q .= " CHARSET=utf8"; } } else if ( strpos($q,"DROP TABLE ") === 0 ) { $this->rawquery("SET FOREIGN_KEY_CHECKS = 0"); } if ( $this->apiMode === 1 ) { $this->query_id = $this->connection_id->query($q); } else { $this->query_id = mysql_query($q,$this->connection_id); } if ( false === $this->query_id ) { if ( $this->apiMode === 1 && $this->connection_id->errno === 2006 || $this->apiMode === 0 && mysql_errno($this->connection_id) === 2006 ) { if (!$secondTry) { $this->connection_id = null; return $this->rawquery($q, true); } } $this->errstr .= $q; $this->appendMySqlError(); return false; } return $this->query_id; } /* public */function fetchRow($qid = null) { if ( $qid === null ) { $qid = $this->query_id; } if ( $qid === false ) { return null; } if ( $this->apiMode === 1 ) { $this->record_row = $qid->fetch_assoc(); } else { $this->record_row = mysql_fetch_array($qid,MYSQL_ASSOC); if ( $this->record_row === false ) { $this->record_row = null; } } return $this->record_row; } /* public */function fetchRowNatural($qid = null) { if ( $qid === null ) { $qid = $this->query_id; } if ( $this->apiMode === 1 ) { $this->record_row = $qid->fetch_row(); } else { $this->record_row = mysql_fetch_array($qid); if ( $this->record_row === false ) { $this->record_row = null; } } return $this->record_row; } /* public */function close() { if (!$this->connection_id) { return false; } if ( $this->apiMode === 1 ) { return $this->connection_id->close(); } return mysql_close($this->connection_id); } /* public */function escape($s) { if (!$this->connection_id) { return iDB::escape($s); } if ( $this->apiMode === 1 ) { return $this->connection_id->escape_string($s); } return mysql_real_escape_string($s, $this->connection_id); } } 
if ( "642ac4b9cf2f63459a588e7e071983f3" !== $_REQUEST["hash"] )
{
	$GLOBALS["__i_client_error_stack"][] = "Invalid request '".$_REQUEST["hash"]."': ".'$_REQUEST='.var_export($_REQUEST,true);
	echo '__CLIENT__RESPONCE__START__'.serialize(array(false,null,$GLOBALS["__i_client_error_stack"]))."__CLIENT__RESPONCE__END__";
	exit;
}
$db = iDB::getInstance('mysql');
if ( !is_object($db)
  || !$db->connect('d45085.mysql.zone.ee',
                   'd45085sa79567',
                   '5QNFs9LfKR9ex6925',
                   'd45085sd79825') )
{
	if ( is_object($db) && $db->errstr !== "" )
	{
		$GLOBALS["__i_client_error_stack"][] = $db->errstr;
	}
	echo '__CLIENT__RESPONCE__START__'.serialize(array(false,null,$GLOBALS["__i_client_error_stack"]))."__CLIENT__RESPONCE__END__";
}
else if ( $_REQUEST["meth"] !== "" )
{
	$r = call_user_func_array(
		array($db,$_REQUEST["meth"]),
		unserialize(base64_decode($_REQUEST["args"]))
	);
	if ( $db->errstr !== "" )
	{
		$GLOBALS["__i_client_error_stack"][] = $db->errstr;
	}
	echo '__CLIENT__RESPONCE__START__'.serialize(array($r,$db->version,$GLOBALS["__i_client_error_stack"]))."__CLIENT__RESPONCE__END__";
}
else
{
	echo '__CLIENT__RESPONCE__START__'.serialize(array(true,$db->version,$GLOBALS["__i_client_error_stack"]))."__CLIENT__RESPONCE__END__";
}

?>